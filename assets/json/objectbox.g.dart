// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

/*
import 'dart:typed_data';

import 'package:ecobio/database/objectbox/item_model.dart';
import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';
import 'package:ecobio/database/objectbox/item_model.dart';
import 'package:ecobio/database/objectbox/model.dart';
import 'package:ecobio/database/objectbox/order_model.dart';
//import 'database/objectbox/item_model.dart';
//import 'database/objectbox/model.dart';
//import 'database/objectbox/order_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1407084180086225461),
      name: 'ItemModel',
      lastPropertyId: const IdUid(3, 2491109648461284201),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2770666828522804700),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1926200375033719877),
            name: 'itemCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2491109648461284201),
            name: 'itemName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 1856038014252520921),
            name: 'items',
            targetId: const IdUid(3, 4752336214553839717))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5237135405600583584),
      name: 'Note',
      lastPropertyId: const IdUid(4, 2083991374955602051),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1346873088685620301),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2098044706519527958),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6340918199492469680),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2083991374955602051),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4752336214553839717),
      name: 'OrderModel',
      lastPropertyId: const IdUid(2, 4792004969775757948),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4176379125193453863),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4792004969775757948),
            name: 'ordered',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 7706212867305273207),
            name: 'items',
            targetId: const IdUid(1, 1407084180086225461))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 4752336214553839717),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(2, 7706212867305273207),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ItemModel: EntityDefinition<ItemModel>(
        model: _entities[0],
        toOneRelations: (ItemModel object) => [],
        toManyRelations: (ItemModel object) =>
            {RelInfo<ItemModel>.toMany(1, object.id): object.items},
        getId: (ItemModel object) => object.id,
        setId: (ItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemModel object, fb.Builder fbb) {
          final itemNameOffset = fbb.writeString(object.itemName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.itemCount);
          fbb.addOffset(2, itemNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ItemModel(
              itemCount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              itemName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.items, store,
              RelInfo<ItemModel>.toMany(1, object.id), store.box<ItemModel>());
          return object;
        }),
    Note_: EntityDefinition<Note>(
        model: _entities[1],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final commentOffset =
              object.comment == null ? null : fbb.writeString(object.comment!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, commentOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Note(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[2],
        toOneRelations: (OrderModel object) => [],
        toManyRelations: (OrderModel object) =>
            {RelInfo<OrderModel>.toMany(2, object.id): object.items},
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.ordered);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..ordered =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          InternalToManyAccess.setRelInfo(
              object.items,
              store,
              RelInfo<OrderModel>.toMany(2, object.id),
              store.box<OrderModel>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ItemModel] entity fields to define ObjectBox queries.
class ItemModel_ {
  /// see [ItemModel.id]
  static final id = QueryIntegerProperty<ItemModel>(_entities[0].properties[0]);

  /// see [ItemModel.itemCount]
  static final itemCount =
      QueryIntegerProperty<ItemModel_>(_entities[0].properties[1]);

  /// see [ItemModel.itemName]
  static final itemName =
      QueryStringProperty<ItemModel>(_entities[0].properties[2]);

  /// see [ItemModel.items]
  static final items =
      QueryRelationToMany<ItemModel, OrderModel>(_entities[0].relations[0]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[1].properties[0]);

  /// see [Note.text]
  static final text = QueryStringProperty<Note>(_entities[1].properties[1]);

  /// see [Note.comment]
  static final comment = QueryStringProperty<Note>(_entities[1].properties[2]);

  /// see [Note.date]
  static final date = QueryIntegerProperty<Note>(_entities[1].properties[3]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.id]
  static final id =
      QueryIntegerProperty<OrderModel>(_entities[2].properties[0]);

  /// see [OrderModel.ordered]
  static final ordered =
      QueryBooleanProperty<OrderModel>(_entities[2].properties[1]);

  /// see [OrderModel.items]
  static final items =
      QueryRelationToMany<OrderModel, ItemModel>(_entities[2].relations[0]);
}

*/
